{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","goofers","setGoofers","allGoofs","setAllGoofs","inputValue","setInputValue","contractAddress","contractABI","abi","checkWalletConnection","a","window","ethereum","console","log","request","method","accounts","length","account","getAllGoofs","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","goofGateContract","Contract","getTotalGoofs","count","toNumber","goofs","cleanGoofs","forEach","goof","push","address","goofer","timestamp","Date","message","gasLimit","goofTxn","hash","wait","useEffect","onNewGoof","from","prevState","on","off","onInputChange","event","value","target","className","role","onClick","type","placeholder","onChange","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ef96b7b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { ethers, providers } from 'ethers';\nimport './App.css';\nimport abi from './utils/GoofGate.json';\n\nexport default function App() {\n  // STATE\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [goofers, setGoofers] = useState(0);\n  const [allGoofs, setAllGoofs] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  // CONSTANT\n  // Address of our contract\n  const contractAddress = '0xE853E18c0D01f8c1c78C6e2590F58207D27869F7';\n  // ABI json\n  const contractABI = abi.abi;\n\n  // Lets see if user connected their MetaMask Wallet\n  const checkWalletConnection = async () => {\n    try {\n      const { ethereum } = window;\n\n      if(!ethereum) {\n        console.log('Metamask is needed to continue');\n        return;\n      } else {\n        console.log('Eth obj available: ', ethereum);\n      }\n  \n      // See if we are authorized to access the user's wallet\n      const accounts = await ethereum.request({method: 'eth_accounts'});\n  \n      if(accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Auth account available: ', account);\n        // Set the curretn account\n        setCurrentAccount(account);\n        getAllGoofs();\n      } else {\n        console.log('No authorized account avaiable.');\n      }\n\n\n    } catch (err) {\n      console.log('Error in wallet connection: ', err);\n    }\n\n  };\n\n  // Connect wallet method\n  const connectWallet = async () => {\n    try {\n      const {ethereum} = window;\n\n      if(!ethereum) {\n        alert('Please download MetaMask.');\n        return;\n      }\n\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n\n      console.log('Connected to account: ', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log('Could not connect to any account.');\n    }\n  };\n\n  const getAllGoofs = async () => {\n    try {\n      const{ethereum} = window;\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        // get current contract info\n        // total goofers\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber());\n\n        // get goofs\n        const goofs = await goofGateContract.getAllGoofs();\n\n        // clean data\n        let cleanGoofs = [];\n        goofs.forEach(goof => {\n          cleanGoofs.push({\n            address: goof.goofer,\n            timestamp: new Date(goof.timestamp * 1000),\n            message: goof.message\n          });\n        });\n        setAllGoofs(cleanGoofs);\n      } else {\n        console.log('No ethereum obj available.');\n      }\n    } catch(err) {\n      console.log('Error getting all goofs: ', err);\n    }\n  };\n\n  const goof = async () => {\n    if(inputValue.length === 0) {\n      console.log('No link or msg given!');\n      return;\n    }\n    console.log('Msg or link:', inputValue);\n\n    try {\n      const {ethereum} = window;\n\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        // WRITING FUNCTION TO BLOCKCHAIN\n        const goofTxn = await goofGateContract.goof(inputValue, { gasLimit: 300000 });\n        console.log('Mining...', goofTxn.hash);\n\n        await goofTxn.wait();\n        console.log('Mined --', goofTxn.hash);\n\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber());\n      } else {\n        console.log('No ethereum object available.');\n      }\n    } catch(err) {\n      console.log('Could not goof: ', err);\n    }\n  };\n\n  useEffect(() => {\n    let goofGateContract;\n  \n    const onNewGoof = (from, timestamp, message) => {\n      console.log('NewGoof', from, timestamp, message);\n      setAllGoofs(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n  \n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n  \n      goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n      goofGateContract.on('NewGoof', onNewGoof);\n    }\n  \n    return () => {\n      if (goofGateContract) {\n        goofGateContract.off('NewGoof', onNewGoof);\n      }\n    };\n  }, []);\n\n\n  const renderNotConnected = () => (\n    <div className='container'>\n      <button className='goofButton connect-wallet-button' onClick={connectWallet}>Connect MetaMask</button>\n    </div>\n  );\n\n  const renderConnected = () => (\n    <div className='connected-container'>\n      <input type='text' placeholder='Give a goofy msg, or gif link!' value={inputValue} onChange={onInputChange}/>\n      <button className='goofButton submit-button' onClick={goof}>GOOF OFF</button>\n\n      <h3 className='subtext'>Goofy Goobers: {goofers}</h3>\n      {allGoofs.map((goof, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {goof.address}</div>\n              <div>Time: {goof.timestamp.toString()}</div>\n              <div>Message: {goof.message}</div>\n            </div>)\n        })}\n    </div>\n  );\n\n    // Get Input Change\n    const onInputChange = (event) => {\n      const {value} = event.target;\n      setInputValue(value);\n    };\n\n  // Run our function when the page loads\n  useEffect(() => {\n    checkWalletConnection();\n  },[]);\n  \n  return (\n    <div className='mainContainer'>\n      <div className={currentAccount ? 'authed-container' : 'container'}>\n        <h2 className='header'>\n          <span role='img'>😵‍💫🤌</span> Hey you GOOF!\n        </h2>\n        <p className='bio'>\n        I am jetgoof and own a goofy little puppy, isn't that cool? \n        Connect your Ethereum wallet and show me how goofy you are!\n        </p>\n        {!currentAccount && renderNotConnected()}\n        {currentAccount && renderConnected()}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
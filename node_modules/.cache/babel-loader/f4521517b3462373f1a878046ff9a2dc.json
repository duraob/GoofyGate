{"ast":null,"code":"var _jsxFileName = \"/home/jet/Documents/buildspace/eth-proj/waveportal-starter-project/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { ethers, providers } from 'ethers';\nimport './App.css';\nimport abi from './utils/GoofGate.json';\nexport default function App() {\n  // STATE\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [goofers, setGoofers] = useState(0);\n  const [allGoofs, setAllGoofs] = useState([]); // CONSTANT\n  // Address of our contract\n\n  const contractAddress = '0x893b3786F759ec232EDA16C86bD860778411D671'; // ABI json\n\n  const contractABI = abi.abi; // Lets see if user connected their MetaMask Wallet\n\n  const checkWalletConnection = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Metamask is needed to continue');\n        return;\n      } else {\n        console.log('Eth obj available: ', ethereum);\n      } // See if we are authorized to access the user's wallet\n\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Auth account available: ', account); // Set the curretn account\n\n        setCurrentAccount(account);\n        getAllGoofs();\n      } else {\n        console.log('No authorized account avaiable.');\n      }\n    } catch (err) {\n      console.log('Error in wallet connection: ', err);\n    }\n  }; // Connect wallet method\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Please download MetaMask.');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected to account: ', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log('Could not connect to any account.');\n    }\n  };\n\n  const getAllGoofs = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer); // get current contract info\n        // total goofers\n\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumbers()); // get goofs\n\n        const goofs = await goofGateContract.getAllGoofs(); // clean data\n\n        let cleanGoofs = [];\n        goofs.forEach(goof => {\n          cleanGoofs.push({\n            address: goof.goofer,\n            timestamp: new Date(goof.timestamp * 1000),\n            message: goof.message\n          });\n        });\n        setAllGoofs(cleanGoofs);\n      } else {\n        console.log('No ethereum obj available.');\n      }\n    } catch (err) {\n      console.log('Error getting all goofs: ', err);\n    }\n  };\n\n  const goof = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer); // READ FUNCTION FROM BLOCKCHAIN\n\n        let count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber()); // WRITING FUNCTION TO BLOCKCHAIN\n\n        const goofTxn = await goofGateContract.goof();\n        console.log('Mining...', goofTxn.hash);\n        await goofTxn.wait();\n        console.log('Mined --', goofTxn.hash);\n        count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber());\n      } else {\n        console.log('No ethereum object available.');\n      }\n    } catch (err) {\n      console.log('Could not goof: ', err);\n    }\n  };\n\n  const renderNotConnected = () => /*#__PURE__*/React.createElement(\"button\", {\n    className: \"goofButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, \"Connect MetaMask\");\n\n  const renderConnected = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, \"I am jetgoof and own a goofy little puppy, isn't that cool? Connect your Ethereum wallet and show me how goofy you are!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"goofButton\",\n    onClick: goof,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"GOOF OFF\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, \"Goofy Goobers: \", goofers), allGoofs.map((goof, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"OldLace\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, \"Address: \", goof.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }, \"Time: \", goof.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }, \"Message: \", goof.message));\n  })); // Run our function when the page loads\n\n\n  useEffect(() => {\n    checkWalletConnection();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDE35\\u200D\\uD83D\\uDCAB\\uD83E\\uDD0C\"), \" Hey you GOOF!\"), !currentAccount && renderNotConnected(), currentAccount && renderConnected()));\n}","map":{"version":3,"sources":["/home/jet/Documents/buildspace/eth-proj/waveportal-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","providers","abi","App","currentAccount","setCurrentAccount","goofers","setGoofers","allGoofs","setAllGoofs","contractAddress","contractABI","checkWalletConnection","ethereum","window","console","log","accounts","request","method","length","account","getAllGoofs","err","connectWallet","alert","provider","Web3Provider","signer","getSigner","goofGateContract","Contract","count","getTotalGoofs","toNumber","toNumbers","goofs","cleanGoofs","forEach","goof","push","address","goofer","timestamp","Date","message","goofTxn","hash","wait","renderNotConnected","renderConnected","map","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { ethers, providers } from 'ethers';\nimport './App.css';\nimport abi from './utils/GoofGate.json';\n\nexport default function App() {\n  // STATE\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [goofers, setGoofers] = useState(0);\n  const [allGoofs, setAllGoofs] = useState([]);\n  // CONSTANT\n  // Address of our contract\n  const contractAddress = '0x893b3786F759ec232EDA16C86bD860778411D671';\n  // ABI json\n  const contractABI = abi.abi;\n\n  // Lets see if user connected their MetaMask Wallet\n  const checkWalletConnection = async () => {\n    try {\n      const { ethereum } = window;\n\n      if(!ethereum) {\n        console.log('Metamask is needed to continue');\n        return;\n      } else {\n        console.log('Eth obj available: ', ethereum);\n      }\n  \n      // See if we are authorized to access the user's wallet\n      const accounts = await ethereum.request({method: 'eth_accounts'});\n  \n      if(accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Auth account available: ', account);\n        // Set the curretn account\n        setCurrentAccount(account);\n        getAllGoofs();\n      } else {\n        console.log('No authorized account avaiable.');\n      }\n\n\n    } catch (err) {\n      console.log('Error in wallet connection: ', err);\n    }\n\n  };\n\n  // Connect wallet method\n  const connectWallet = async () => {\n    try {\n      const {ethereum} = window;\n\n      if(!ethereum) {\n        alert('Please download MetaMask.');\n        return;\n      }\n\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n\n      console.log('Connected to account: ', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log('Could not connect to any account.');\n    }\n  };\n\n  const getAllGoofs = async () => {\n    try {\n      const{ethereum} = window;\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        // get current contract info\n        // total goofers\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumbers());\n\n        // get goofs\n        const goofs = await goofGateContract.getAllGoofs();\n\n        // clean data\n        let cleanGoofs = [];\n        goofs.forEach(goof => {\n          cleanGoofs.push({\n            address: goof.goofer,\n            timestamp: new Date(goof.timestamp * 1000),\n            message: goof.message\n          });\n        });\n        setAllGoofs(cleanGoofs);\n      } else {\n        console.log('No ethereum obj available.');\n      }\n    } catch(err) {\n      console.log('Error getting all goofs: ', err);\n    }\n  };\n\n  const goof = async () => {\n    try {\n      const {ethereum} = window;\n\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        // READ FUNCTION FROM BLOCKCHAIN\n        let count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n\n        // WRITING FUNCTION TO BLOCKCHAIN\n        const goofTxn = await goofGateContract.goof();\n        console.log('Mining...', goofTxn.hash);\n\n        await goofTxn.wait();\n        console.log('Mined --', goofTxn.hash);\n\n        count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber());\n      } else {\n        console.log('No ethereum object available.');\n      }\n    } catch(err) {\n      console.log('Could not goof: ', err);\n    }\n  };\n\n\n  const renderNotConnected = () => (\n    <button className='goofButton' onClick={connectWallet}>Connect MetaMask</button>\n  );\n\n  const renderConnected = () => (\n    <div className='dataContainer'>\n      <div className='bio'>\n      I am jetgoof and own a goofy little puppy, isn't that cool? Connect your Ethereum wallet and show me how goofy you are!\n      </div>\n\n      <button className='goofButton' onClick={goof}>\n      GOOF OFF\n      </button>\n\n      <h3 className='bio'>Goofy Goobers: {goofers}</h3>\n      {allGoofs.map((goof, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {goof.address}</div>\n              <div>Time: {goof.timestamp.toString()}</div>\n              <div>Message: {goof.message}</div>\n            </div>)\n        })}\n    </div>\n  );\n  // Run our function when the page loads\n  useEffect(() => {\n    checkWalletConnection();\n  },[]);\n  \n  return (\n    <div className='mainContainer'>\n\n      <div className='dataContainer'>\n        <div className='header'>\n        <span role='img'>😵‍💫🤌</span> Hey you GOOF!\n        </div>\n        {!currentAccount && renderNotConnected()}\n        {currentAccount && renderConnected()}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/jet/Documents/buildspace/eth-proj/waveportal-starter-project/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport './App.css';\nexport default function App() {\n  // STATE\n  const [currentAccount, setCurrentAccount] = useState(''); // Lets see if user connected their MetaMask Wallet\n\n  const checkWalletConnection = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Metamask is needed to continue');\n        return;\n      } else {\n        console.log('Eth obj available: ', ethereum);\n      } // See if we are authorized to access the user's wallet\n\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Auth account available: ', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account avaiable.');\n      }\n    } catch (err) {\n      console.log('Error in wallet connection: ', err);\n    }\n  }; // Connect wallet method\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Please download MetaMask.');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected to account: ', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log('Could not connect to any account.');\n    }\n  };\n\n  const renderNotConnected = () => {\n    /*#__PURE__*/\n    React.createElement(\"button\", {\n      className: \"waveButton\",\n      onClick: connectWallet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }, \"Connect MetaMask\");\n  }; // Run our function when the page loads\n\n\n  useEffect(() => {\n    checkWalletConnection();\n  }, []);\n\n  const wave = () => {};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDE35\\u200D\\uD83D\\uDCAB\\uD83E\\uDD0C\"), \" Hey you GOOF!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Wave at Me\"), !currentAccount && renderNotConnected()));\n}","map":{"version":3,"sources":["/home/jet/Documents/buildspace/eth-proj/waveportal-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","App","currentAccount","setCurrentAccount","checkWalletConnection","ethereum","window","console","log","accounts","request","method","length","account","err","connectWallet","alert","renderNotConnected","wave"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { ethers } from \"ethers\";\nimport './App.css';\n\nexport default function App() {\n  // STATE\n  const [currentAccount, setCurrentAccount] = useState('');\n\n  // Lets see if user connected their MetaMask Wallet\n  const checkWalletConnection = async () => {\n    try {\n      const { ethereum } = window;\n\n      if(!ethereum) {\n        console.log('Metamask is needed to continue');\n        return;\n      } else {\n        console.log('Eth obj available: ', ethereum);\n      }\n  \n      // See if we are authorized to access the user's wallet\n      const accounts = await ethereum.request({method: 'eth_accounts'});\n  \n      if(accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Auth account available: ', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account avaiable.');\n      }\n    } catch (err) {\n      console.log('Error in wallet connection: ', err);\n    }\n\n  };\n\n  // Connect wallet method\n  const connectWallet = async () => {\n    try {\n      const {ethereum} = window;\n\n      if(!ethereum) {\n        alert('Please download MetaMask.');\n        return;\n      }\n\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n\n      console.log('Connected to account: ', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log('Could not connect to any account.');\n    }\n  };\n\n  const renderNotConnected = () => {\n    <button className='waveButton' onClick={connectWallet}>Connect MetaMask</button>\n  };\n\n  // Run our function when the page loads\n  useEffect(() => {\n    checkWalletConnection();\n  },[]);\n\n  const wave = () => {\n    \n  }\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        <span role='img'>😵‍💫🤌</span> Hey you GOOF!\n        </div>\n\n        <div className=\"bio\">\n        I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        {!currentAccount && renderNotConnected()}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/jet/Documents/buildspace/eth-proj/waveportal-starter-project/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { ethers, providers } from 'ethers';\nimport './App.css';\nimport abi from './utils/GoofGate.json';\nexport default function App() {\n  // STATE\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [goofers, setGoofers] = useState(0);\n  const [allGoofs, setAllGoofs] = useState([]);\n  const [inputValue, setInputValue] = useState(''); // CONSTANT\n  // Address of our contract\n\n  const contractAddress = '0xE853E18c0D01f8c1c78C6e2590F58207D27869F7'; // ABI json\n\n  const contractABI = abi.abi; // Lets see if user connected their MetaMask Wallet\n\n  const checkWalletConnection = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Metamask is needed to continue');\n        return;\n      } else {\n        console.log('Eth obj available: ', ethereum);\n      } // See if we are authorized to access the user's wallet\n\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Auth account available: ', account); // Set the curretn account\n\n        setCurrentAccount(account);\n        getAllGoofs();\n      } else {\n        console.log('No authorized account avaiable.');\n      }\n    } catch (err) {\n      console.log('Error in wallet connection: ', err);\n    }\n  }; // Connect wallet method\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Please download MetaMask.');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected to account: ', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log('Could not connect to any account.');\n    }\n  };\n\n  const getAllGoofs = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer); // get current contract info\n        // total goofers\n\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber()); // get goofs\n\n        const goofs = await goofGateContract.getAllGoofs(); // clean data\n\n        let cleanGoofs = [];\n        goofs.forEach(goof => {\n          cleanGoofs.push({\n            address: goof.goofer,\n            timestamp: new Date(goof.timestamp * 1000),\n            message: goof.message\n          });\n        });\n        setAllGoofs(cleanGoofs);\n      } else {\n        console.log('No ethereum obj available.');\n      }\n    } catch (err) {\n      console.log('Error getting all goofs: ', err);\n    }\n  };\n\n  const goof = async () => {\n    if (inputValue.length === 0) {\n      console.log('No link or msg given!');\n      return;\n    }\n\n    console.log('Msg or link:', inputValue);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer); // WRITING FUNCTION TO BLOCKCHAIN\n\n        const goofTxn = await goofGateContract.goof(inputValue, {\n          gasLimit: 300000\n        });\n        console.log('Mining...', goofTxn.hash);\n        await goofTxn.wait();\n        console.log('Mined --', goofTxn.hash);\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber());\n      } else {\n        console.log('No ethereum object available.');\n      }\n    } catch (err) {\n      console.log('Could not goof: ', err);\n    }\n  };\n\n  useEffect(() => {\n    let goofGateContract;\n\n    const onNewGoof = (from, timestamp, message) => {\n      console.log('NewGoof', from, timestamp, message);\n      setAllGoofs(prevState => [...prevState, {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message\n      }]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n      goofGateContract.on('NewGoof', onNewGoof);\n    }\n\n    return () => {\n      if (goofGateContract) {\n        goofGateContract.off('NewGoof', onNewGoof);\n      }\n    };\n  }, []);\n\n  const renderNotConnected = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"goofButton connect-wallet-button\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, \"Connect MetaMask\"));\n\n  const renderConnected = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"connected-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Give a goofy msg, or gif link!\",\n    value: inputValue,\n    onChange: onInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"goofButton submit-button\",\n    onClick: goof,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, \"GOOF OFF\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"subtext\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, \"Goofy Goobers: \", goofers), allGoofs.map((goof, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"OldLace\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }\n    }, \"Address: \", goof.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 15\n      }\n    }, \"Time: \", goof.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }, \"Message: \", goof.message));\n  })); // Get Input Change\n\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  }; // Run our function when the page loads\n\n\n  useEffect(() => {\n    checkWalletConnection();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: currentAccount ? 'authed-container' : 'container',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDE35\\u200D\\uD83D\\uDCAB\\uD83E\\uDD0C\"), \" Hey you GOOF!\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, \"I am jetgoof and own a goofy little puppy, isn't that cool? Connect your Ethereum wallet and show me how goofy you are!\"), !currentAccount && renderNotConnected(), currentAccount && renderConnected()));\n}","map":{"version":3,"sources":["/home/jet/Documents/buildspace/eth-proj/waveportal-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","providers","abi","App","currentAccount","setCurrentAccount","goofers","setGoofers","allGoofs","setAllGoofs","inputValue","setInputValue","contractAddress","contractABI","checkWalletConnection","ethereum","window","console","log","accounts","request","method","length","account","getAllGoofs","err","connectWallet","alert","provider","Web3Provider","signer","getSigner","goofGateContract","Contract","count","getTotalGoofs","toNumber","goofs","cleanGoofs","forEach","goof","push","address","goofer","timestamp","Date","message","goofTxn","gasLimit","hash","wait","onNewGoof","from","prevState","on","off","renderNotConnected","renderConnected","onInputChange","map","index","backgroundColor","marginTop","padding","toString","event","value","target"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { ethers, providers } from 'ethers';\nimport './App.css';\nimport abi from './utils/GoofGate.json';\n\nexport default function App() {\n  // STATE\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [goofers, setGoofers] = useState(0);\n  const [allGoofs, setAllGoofs] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  // CONSTANT\n  // Address of our contract\n  const contractAddress = '0xE853E18c0D01f8c1c78C6e2590F58207D27869F7';\n  // ABI json\n  const contractABI = abi.abi;\n\n  // Lets see if user connected their MetaMask Wallet\n  const checkWalletConnection = async () => {\n    try {\n      const { ethereum } = window;\n\n      if(!ethereum) {\n        console.log('Metamask is needed to continue');\n        return;\n      } else {\n        console.log('Eth obj available: ', ethereum);\n      }\n  \n      // See if we are authorized to access the user's wallet\n      const accounts = await ethereum.request({method: 'eth_accounts'});\n  \n      if(accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Auth account available: ', account);\n        // Set the curretn account\n        setCurrentAccount(account);\n        getAllGoofs();\n      } else {\n        console.log('No authorized account avaiable.');\n      }\n\n\n    } catch (err) {\n      console.log('Error in wallet connection: ', err);\n    }\n\n  };\n\n  // Connect wallet method\n  const connectWallet = async () => {\n    try {\n      const {ethereum} = window;\n\n      if(!ethereum) {\n        alert('Please download MetaMask.');\n        return;\n      }\n\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n\n      console.log('Connected to account: ', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log('Could not connect to any account.');\n    }\n  };\n\n  const getAllGoofs = async () => {\n    try {\n      const{ethereum} = window;\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        // get current contract info\n        // total goofers\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber());\n\n        // get goofs\n        const goofs = await goofGateContract.getAllGoofs();\n\n        // clean data\n        let cleanGoofs = [];\n        goofs.forEach(goof => {\n          cleanGoofs.push({\n            address: goof.goofer,\n            timestamp: new Date(goof.timestamp * 1000),\n            message: goof.message\n          });\n        });\n        setAllGoofs(cleanGoofs);\n      } else {\n        console.log('No ethereum obj available.');\n      }\n    } catch(err) {\n      console.log('Error getting all goofs: ', err);\n    }\n  };\n\n  const goof = async () => {\n    if(inputValue.length === 0) {\n      console.log('No link or msg given!');\n      return;\n    }\n    console.log('Msg or link:', inputValue);\n\n    try {\n      const {ethereum} = window;\n\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        // WRITING FUNCTION TO BLOCKCHAIN\n        const goofTxn = await goofGateContract.goof(inputValue, { gasLimit: 300000 });\n        console.log('Mining...', goofTxn.hash);\n\n        await goofTxn.wait();\n        console.log('Mined --', goofTxn.hash);\n\n        const count = await goofGateContract.getTotalGoofs();\n        console.log('The total amount of goofs are...', count.toNumber());\n        setGoofers(count.toNumber());\n      } else {\n        console.log('No ethereum object available.');\n      }\n    } catch(err) {\n      console.log('Could not goof: ', err);\n    }\n  };\n\n  useEffect(() => {\n    let goofGateContract;\n  \n    const onNewGoof = (from, timestamp, message) => {\n      console.log('NewGoof', from, timestamp, message);\n      setAllGoofs(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n  \n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n  \n      goofGateContract = new ethers.Contract(contractAddress, contractABI, signer);\n      goofGateContract.on('NewGoof', onNewGoof);\n    }\n  \n    return () => {\n      if (goofGateContract) {\n        goofGateContract.off('NewGoof', onNewGoof);\n      }\n    };\n  }, []);\n\n\n  const renderNotConnected = () => (\n    <div className='container'>\n      <button className='goofButton connect-wallet-button' onClick={connectWallet}>Connect MetaMask</button>\n    </div>\n  );\n\n  const renderConnected = () => (\n    <div className='connected-container'>\n      <input type='text' placeholder='Give a goofy msg, or gif link!' value={inputValue} onChange={onInputChange}/>\n      <button className='goofButton submit-button' onClick={goof}>GOOF OFF</button>\n\n      <h3 className='subtext'>Goofy Goobers: {goofers}</h3>\n      {allGoofs.map((goof, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {goof.address}</div>\n              <div>Time: {goof.timestamp.toString()}</div>\n              <div>Message: {goof.message}</div>\n            </div>)\n        })}\n    </div>\n  );\n\n    // Get Input Change\n    const onInputChange = (event) => {\n      const {value} = event.target;\n      setInputValue(value);\n    };\n\n  // Run our function when the page loads\n  useEffect(() => {\n    checkWalletConnection();\n  },[]);\n  \n  return (\n    <div className='mainContainer'>\n      <div className={currentAccount ? 'authed-container' : 'container'}>\n        <h2 className='header'>\n          <span role='img'>😵‍💫🤌</span> Hey you GOOF!\n        </h2>\n        <p className='bio'>\n        I am jetgoof and own a goofy little puppy, isn't that cool? \n        Connect your Ethereum wallet and show me how goofy you are!\n        </p>\n        {!currentAccount && renderNotConnected()}\n        {currentAccount && renderConnected()}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}